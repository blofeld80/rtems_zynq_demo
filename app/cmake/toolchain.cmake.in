set(CMAKE_SYSTEM_NAME Generic)


set(CMAKE_FIND_ROOT_PATH "REPLACE_RTEMS_TOOLCHAIN_INSTALL_DIR")

# Some additional info, I generate it out of the *.pc file
set(CMAKE_SYSTEM_PROCESSOR "REPLACE_RTEMS_BSP_ARCH")
set(RTEMS_ARCH        "arm")
set(RTEMS_BSP         "REPLACE_RTEMS_BSP_NAME")
set(RTEMS_BSP_BASE    "REPLACE_RTEMS_BSP_NAME")
set(RTEMS_BSP_FAMILY  "xilinx-zynq")
set(RTEMS_MAJOR       "6")
set(RTEMS_MINOR       "0")
set(RTEMS_REVISION    "0")

# Get the flags
set(RTEMS_ABI_FLAGS_LIST -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a9)


# Set up tool names
set(CMAKE_C_COMPILER ${CMAKE_FIND_ROOT_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-rtems${RTEMS_MAJOR}-gcc CACHE INTERNAL "c compiler")
set(CMAKE_CXX_COMPILER ${CMAKE_FIND_ROOT_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-rtems${RTEMS_MAJOR}-g++ CACHE INTERNAL "cxx compiler")
set(CMAKE_AR ${CMAKE_FIND_ROOT_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-rtems${RTEMS_MAJOR}-ar CACHE INTERNAL "archiver")
set(CMAKE_OBJCOPY ${CMAKE_FIND_ROOT_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-rtems${RTEMS_MAJOR}-objcopy CACHE INTERNAL "objcpy")
set(CMAKE_STRIP ${CMAKE_FIND_ROOT_PATH}/bin/${CMAKE_SYSTEM_PROCESSOR}-rtems${RTEMS_MAJOR}-strip CACHE INTERNAL "strip")


# Set up RTEMS lib and include dirs
set(RTEMS_INC_DIR REPLACE_RTEMS_INC_DIR)
set(RTEMS_LIB_DIR REPLACE_RTEMS_LIB_DIR)



#if(EXISTS "${CMAKE_FIND_ROOT_PATH}/share/cmake/toolchain_libbsd.cmake")
#  include("${CMAKE_FIND_ROOT_PATH}/share/cmake/toolchain_libbsd.cmake")
# libbsd is always there - per definition for this demo
  set(RTEMS_LIBBSD_ENABLED -lbsd)
  set(RTEMS_LIBBSD_FLAGS -isystemREPLACE_RTEMS_LIBBSD_INC_DIR)
  set(RTEMS_LIBBSD_LINK_FLAGS -BREPLACE_RTEMS_LIBBSD_LIB_DIR)
#endif()


# We'll use spec files instead of -qrtems to have the same linker cmds no matter if libbsd is present or not
set(RTEMS_SPEC_FILE_IN  REPLACE_APP_FOLDER/cmake/rtems.spec.in)
set(RTEMS_SPEC_FILE_OUT ${RTEMS_LIB_DIR}/rtems.spec)

# Write spec file if required
configure_file(${RTEMS_SPEC_FILE_IN} ${RTEMS_SPEC_FILE_OUT})


set(RTEMS_FLAGS_LIST ${RTEMS_ABI_FLAGS_LIST} ${RTEMS_LIBBSD_FLAGS} -isystem${RTEMS_INC_DIR})
set(RTEMS_LINK_FLAGS_LIST -B${RTEMS_LIB_DIR} ${RTEMS_LIBBSD_LINK_FLAGS} -specs=${RTEMS_SPEC_FILE_OUT} -Wl,--gc-sections)



# Compile the init file if it has changed or the obj file does not exist
set(RTEMS_INIT_C_FILE_OBJ "${RTEMS_LIB_DIR}/init_dummy.obj")

set(RTEMS_INIT_C_FILE "REPLACE_APP_FOLDER/src/main/pre_main.c")

if(NOT EXISTS ${RTEMS_INIT_C_FILE_OBJ}) 
  if(NOT DEFINED RTEMS_INIT_C_FILE)
    message(FATAL_ERROR "Please provide an init file via -DRTEMS_INIT_C_FILE=path_to_file")
  else()
    if(NOT EXISTS "${RTEMS_INIT_C_FILE}")
      message(FATAL_ERROR "Provided init file ${RTEMS_INIT_C_FILE} is not found")
    endif()
    set(COMPILE_INIT_FILE TRUE)
  endif()
else()
  if(DEFINED RTEMS_INIT_C_FILE)
    if(${RTEMS_INIT_C_FILE} IS_NEWER_THAN ${RTEMS_INIT_C_FILE_OBJ})
      set(COMPILE_INIT_FILE TRUE)
    endif()
  endif()
endif()

if(${COMPILE_INIT_FILE})
  message(STATUS "Compile init file")
  set (CMD ${CMAKE_C_COMPILER} ${RTEMS_FLAGS_LIST} -o ${RTEMS_INIT_C_FILE_OBJ} -c ${RTEMS_INIT_C_FILE})
  execute_process(COMMAND  ${CMD} RESULT_VARIABLE RET)
  if(RET AND NOT RET EQUAL 0)
    message(FATAL_ERROR "Compilation of init file failed with: ${RET}")
  endif()
endif()


# Convert CMake list to string
string (REPLACE ";" " " RTEMS_ABI_FLAGS "${RTEMS_ABI_FLAGS_LIST}")
string (REPLACE ";" " " RTEMS_FLAGS "${RTEMS_FLAGS_LIST}")
string (REPLACE ";" " " RTEMS_LINK_FLAGS "${RTEMS_LINK_FLAGS_LIST}")

# Set up compiler and linker flags, inject user specified flags
set(CMAKE_C_FLAGS                   "            ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections " CACHE INTERNAL "c compiler flags")
set(CMAKE_C_FLAGS_DEBUG             "-g          -Og -g3" CACHE INTERNAL "c dbg compiler flags")
set(CMAKE_C_FLAGS_RELEASE           "-DNDEBUG    -O2" CACHE INTERNAL "c rel compiler flags")
set(CMAKE_C_FLAGS_RELWITHDEBINFO    "-g -DNDEBUG -O2 -g" CACHE INTERNAL "c relwithdbginfo compiler flags")
set(CMAKE_C_FLAGS_MINSIZEREL        "-DNDEBUG    -Os" CACHE INTERNAL "c minsizerel compiler flags")

set(CMAKE_CXX_FLAGS                 "            ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections -std=gnu++14 " CACHE INTERNAL "cxx compiler flags")
set(CMAKE_CXX_FLAGS_DEBUG           "-g          -Og -g3" CACHE INTERNAL "cxx dbg compiler flags")
set(CMAKE_CXX_FLAGS_RELEASE         "-DNDEBUG    -O2" CACHE INTERNAL "cxx rel compiler flags")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "-g -DNDEBUG -O2 -g" CACHE INTERNAL "cxx relwithdbginfo compiler flags")
set(CMAKE_CXX_FLAGS_MINSIZEREL      "-DNDEBUG    -Os" CACHE INTERNAL "cxx minsizerel compiler flags")

set(RTEMS_CMAKE_APPLICATION_C_FLAGS_DEBUG           "-g          ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections  -Og -g3" CACHE INTERNAL "c dbg compiler flags")
set(RTEMS_CMAKE_APPLICATION_C_FLAGS_RELEASE         "-DNDEBUG    ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections  -O2" CACHE INTERNAL "c rel compiler flags")
set(RTEMS_CMAKE_APPLICATION_C_FLAGS_RELWITHDEBINFO  "-g -DNDEBUG ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections  -O2 -g" CACHE INTERNAL "c relwithdbginfo compiler flags")
set(RTEMS_CMAKE_APPLICATION_C_FLAGS_MINSIZEREL      "-DNDEBUG    ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections  -Os" CACHE INTERNAL "c minsizerel compiler flags")

set(RTEMS_CMAKE_APPLICATION_CXX_FLAGS_DEBUG           "-g          ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections -std=gnu++14  -Og -g3" CACHE INTERNAL "cxx dbg compiler flags")
set(RTEMS_CMAKE_APPLICATION_CXX_FLAGS_RELEASE         "-DNDEBUG    ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections -std=gnu++14  -O2" CACHE INTERNAL "cxx rel compiler flags")
set(RTEMS_CMAKE_APPLICATION_CXX_FLAGS_RELWITHDEBINFO  "-g -DNDEBUG ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections -std=gnu++14  -O2 -g" CACHE INTERNAL "cxx relwithdbginfo compiler flags")
set(RTEMS_CMAKE_APPLICATION_CXX_FLAGS_MINSIZEREL      "-DNDEBUG    ${RTEMS_FLAGS} ${RTEMS_LIBBSD_FLAGS} -fdata-sections -ffunction-sections -std=gnu++14  -Os" CACHE INTERNAL "cxx minsizerel compiler flags")



set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS_DEBUG} -x assembler-with-cpp")

set(CMAKE_C_FLAGS_INIT "${CMAKE_C_FLAGS}" CACHE INTERNAL "c compiler flags init")
set(CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS}" CACHE INTERNAL "cxx compiler flags init")

# Export RTEMS_EXE_LINKER_FLAGS without linking to init file to allow applications to link to their own init
set(RTEMS_EXE_LINKER_FLAGS "${RTEMS_ABI_FLAGS} ${RTEMS_LINK_FLAGS} -Wl,--print-memory-usage,--print-memory-usage,-Map=output.map")
set(RTEMS_CMAKE_APPLICATION_EXE_LINKER_FLAGS      "${RTEMS_EXE_LINKER_FLAGS}" CACHE INTERNAL "application exe linker flags")

set(CMAKE_EXE_LINKER_FLAGS "${RTEMS_EXE_LINKER_FLAGS} ${RTEMS_INIT_C_FILE_OBJ}" CACHE INTERNAL "exe link flags")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${RTEMS_EXE_LINKER_FLAGS} ${RTEMS_INIT_C_FILE_OBJ}" CACHE INTERNAL "exe link flags init")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_EXECUTABLE_SUFFIX ".elf")

